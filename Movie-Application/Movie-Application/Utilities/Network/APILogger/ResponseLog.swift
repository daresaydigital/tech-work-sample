//
//  ResponseLog.swift
//  Movie-Application
//
//  Created by Mohanna Zakizadeh on 4/26/22.
//

import Foundation

struct MovieResponseLog: URLRequestLoggableProtocol {
    
    let ENABLELOG = true
    
    func logResponse(_ response: HTTPURLResponse?, data: Data?, error: Error?, HTTPMethod: String?) {
        guard ENABLELOG else { return }
        print("\nüíõ ========== Start logResponse ========== üíõ")
        defer {
            print("üü° ========== End logResponse ========== üü°\n")
        }
        guard let response = response else {
            print("==", "‚ùå NULL Response ERROR: ‚ùå")
            return
        }
        if let url = response.url?.absoluteString {
            print("==", "Request URL: `\(url)`")
            print("==", "Response CallBack Status Code: `\(response.statusCode)`")
        } else {
            print("==", "‚ùå LOG ERROR: ‚ùå")
            print("==", "Empty URL")
        }
        if let method = HTTPMethod {
            print("==", "Request HTTPMethod: `\(method)`")
        }
        if let error = error {
            print("==", "‚ùå GOT URL REQUEST ERROR: ‚ùå")
            print(error)
        }
        guard let data = data else {
            print("==", "‚ùå Empty Response ERROR: ‚ùå")
            return
        }
        print("==", "‚úÖ Response CallBack Data: ‚úÖ")
        if let json = data.prettyPrintedJSONString {
            print(json)
        } else {
            let responseDataString: String = String(data: data, encoding: .utf8) ?? "BAD ENCODING"
            print(responseDataString)
        }
    }
}

extension Data {
    var prettyPrintedJSONString: String? {
        guard let object = try? JSONSerialization.jsonObject(with: self, options: []),
              let data = try? JSONSerialization.data(withJSONObject: object, options: [.prettyPrinted]),
              let prettyPrintedString = NSString(data: data, encoding: String.Encoding.utf8.rawValue) as String? else { return nil }
            
        return prettyPrintedString
    }
}
